--УСЛОВИЕ ЗАДАЧИ--
На вход передается массив целых чисел. Необходимо определить, можно ли их разбить
на две группы таким образом, что бы суммы обеих групп совпадали

--ПРИНЦИП РАБОТЫ--
 Данная задача схожа с задачей о рюкзаке: необходимо набрать некоторую сумму,
 используя элементы множества ровно один раз. Для решения задачи воспользуемся методом
 динамического программирования. Создадим матрицу dp, в которой строка i отвечает за то,
 можно ли соответствующие суммы набрать числами, индексы которых <= i, а столбец j отвечает
 за сумму, которую мы хотим набрать на текущем шаге. Таким образом, dp[i][j] отвечает
 за то, можно ли набрать сумму == j числами, индексы которых <= i. Изначально все элемены
 матрицы имеют значение False.
 Отсортируем массив исходных чисел nums по невозрастанию.
 Заполнение матрицы происходит построчно: dp[i][j] равно True, если nums[i] == j,
 либо если сумма j - nums[i] может быть набрана с помощью чисел с индексами <= i. Эта
 информация находится в ячейке dp[i][j - nums[i]]. Иначе ячейка dp[i][j] не меняется
 и остается False.
 Итоговый ответ находится в последней ячейке матрицы dp.
 Т.к. для заполнения i-той строки матрицы dp необходима лишь строка i, то будем хранить
 не всю матрицу dp, а только одну ее строку.

--ВРЕМЕННАЯ СЛОЖНОСТЬ--
 Пусть n - количество чисел из условия, m - сумма, которую нужно набрать
 Поиск ответа происходит за O(n * m)

--ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ--
 На хранение данных о партиях уходит O(n) памяти
 На матрицу dp уходит O(n) памяти
 Таким образом, общая пространственная сложность составляет O(n)
