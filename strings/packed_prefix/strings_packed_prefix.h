/*
 * --УСЛОВИЕ ЗАДАЧИ--
 * На вход подаются строки в запакованном виде(далее ЗС - зпапкованная
 * строка).
 * Пусть сложение — это конкатенация двух строк, а умножение строки на
 * число — повтор строки соответствующее число раз. Пусть некоторая
 * функция f умеет принимать ЗС и распаковывать её. Если запакованная
 * строка D имеет вид D=AB, где A и B тоже ЗС, то
 * f(D) = f(A) + f(B). Если D=n[A], то f(D) = f(A) × n.
 * Необходимо найти наибольший общий префикс всех распакованных строк
 * и вывести его.
 *
 * --ИДЕЯ РЕШЕНИЯ--
 * Для решения задачи необходимо выполнить следующие шаги:
 * 1) Распаковать строки
 * 2) Найти общий префикс всех строк.
 * Распаковка строки происходит рекурсивно, где в рамках одного запуска
 * рекурсии выполняется распаковка элемента "[...]"
 * Каждое новое слово может лишь уменьшить длину общего префикса,
 * поэтому нет необходимости хранить все слова в памяти. Запомним
 * первое слово, а затем будем уменьшать префикс путем отсечения
 * хвостовой несовпадающей части с каждым последующим словом.
 *
 * --ВРЕМЕННАЯ СЛОЖНОСТЬ--
 * Пусть n - количество строк, k - длина строки после распаковки.
 * Распаковка строки происходит за O(k). Всех строк - за O(n * k)
 * Обновление префикса всеми словами происходит за O(n * k)
 * Поиск наибольшего общего префикса занимает O(1)
 * Таким образом, общая временная сложность составит O(n * k)
 *
 * --ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ--
 * Распаковка строки тратит O(k) памяти
 * Хранение префикса занимает не болеее O(k)
 * Таким образом, общая пространственная сложность составит O(k)
 *
 */

#pragma once

#include <iostream>
#include <memory>
#include <optional>

namespace strings_packed_prefix {

    using std::string;
    using std::cout;
    using std::cin;
    using std::optional;
    using std::istringstream;

    class Prefix {
    public:

        Prefix() = default;

        void AddWord(const string &word);

        string GetSmallestPrefix();

    private:
        optional<string> prefix_;
    };

    string ComputeStringPart(const string &packedString, int &startPos);

    string ComputeUnpackedString(const string &packedString);

    void RunProgram();

}