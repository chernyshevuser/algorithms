--УСЛОВИЕ ЗАДАЧИ--
В стране X есть n городов, которым присвоены номера от 1 до n. Столица страны имеет номер n. Между городами
проложены железные дороги. Однако дороги могут быть двух типов по ширине полотна. Любой поезд может ездить
только по одному типу полотна. Условно один тип дорог помечают как R, а другой как B. То есть если маршрут
от одного города до другого имеет как дороги типа R, так и дороги типа B, то ни один поезд не сможет по этому
маршруту проехать. От одного города до другого можно проехать только по маршруту, состоящему исключительно из
дорог типа R или только из дорог типа B. Но это ещё не всё. По дорогам страны X можно двигаться только от
города с меньшим номером к городу с большим номером. Это объясняет большой приток жителей в столицу, у
которой номер n. Карта железных дорог называется оптимальной, если не существует пары городов A и B такой, что
от A до B можно добраться как по дорогам типа R, так и по дорогам типа B. Иными словами, для любой пары городов
верно, что от города с меньшим номером до города с бОльшим номером можно добраться по дорогам только какого-то
одного типа или же что маршрут построить вообще нельзя. Выясните, является ли данная вам карта оптимальной.

--ФОРМАТ ВВОДА--
В первой строке дано число n — количество городов в стране. Далее задана карта железных дорог в следующей формате.
Карта задана n-1 строкой. В i-й строке описаны дороги из города i в города i+1, i+2, ..., n. В строке записано
n - i символов, каждый из которых либо R, либо B. Если j-й символ строки i равен «B», то из города i в город
i + j идет дорога типа «B». Аналогично для типа «R».

--ПРИНЦИП РАБОТЫ--
 Проблема определения оптимальности маршрута дорог сводится к поиску цикла в ориентированном графе, полученным
 из исходного путем разворота дорог второго типа - в данной реализиции дорог типа "R". Поиск цикла сводится к
 поиску в глубину с покраской вершин. При первом заходе в вершину она красится в серый цвет, при выходе - в черный.
 Если вершина белая, от нее запускается DFS. Если от вершины должен быть запушен DFS, а она уже серая - имеется цикл.
 От стартовых вершин DFS запускается до тех пор, пока либо не будет найден цикл, либо не переберутся все вершины,
 имеющиеся в графе.

--ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ--
 НЕОПТИМАЛЬНОСТЬ => СУЩЕСТВОВАНИЕ ЦИКЛА:
 Допустим, между городами X, Y существуют хотя бы 2 возможных пути X->Y, состощих из дорог разного цвета "R" и "B".
 Тогда, если мы развернем дорогу цвета "R", то получим пути X->Y, Y->X, а это значит, что пройдя по такому пути
 X->Y->X мы снова окажемся в городе X, то есть будет существовать цикл. Поэтому оптимальность путей в задаче - это
 отсутствие циклов.
 СУЩЕСТВОВАНИЕ ЦИКЛА => НЕОПТИМАЛЬНОСТЬ:
 Рассмотрим полный ориентированный граф и цикл в нем. Цикл длины 1 невозможен, потому что отсутствуют петли. Цикл
 длины 2 невозможен, потому что отсутствуют парные ребра. Поэтому цикл длины 3 - самый короткий из возможных.
 В терминах задачи цикл длины 3 состоит из двух последовательно идущих ребер одного цвета и одного ребра другого
 цвета. Иными словами существуют 2 пути, состоящих из ребер одного цвета, следовательно, такой граф не будет
 оптимальным. Далее докажем, что, если в полном ориентированном графе существует цикл, то существует и какой-то
 цикл длины 3.
 Рассмотрим цикл длины n != 3. Выберем случайную вершину, назовем ее X. Выберем вершину, отстоящую от X на расстояние
 двух ребер. Назовем ее Y. Т.к. граф полный, то вершины X, Y связаны каким-то ребром.
 1) Если ребро X->Y сонаправлено с движением вдоль цикла, то мы можем выкинуть два ребра, соединяющие в цикле X и Y
 и заменить их ребром X->Y. В этом случае длина цикла станет равна n-1.
 2) Если ребро X->Y имеет противоположное направление, то мы можем выкинуть из цикла все ребра, кроме двух, и
 добавить новое X->Y. В этом случае длина цикла станет равна 3.
 Таким образом, цикл длины n можно за конечное число итераций свести к циклу длины 3.

--ВРЕМЕННАЯ СЛОЖНОСТЬ--
 Пусть V - количество вершин, E - количество ребер.
 DFS запустится не более V раз. Поиск вершины, от которой нужно запустить DFS, в худшем случае переберет все E ребер.
 Таким образом, общая сложность составит O(V + E)

--ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ--
 Хранение графа - O(V + E)
 Хранение информации о посещенных вершинах - O(V)
 Использование рекурсии - O(V)
 Таким образом, общая сложность составит O(V + E)